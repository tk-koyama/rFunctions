x <- na.omit(x)
x
n <- length(x)
n
if (n == 0) return(rep(NA, 10))
rep(NA,10)
vg
sm <- as.data.frame(t(sapply(vg, summaryNA)))
sm
dim(sm)
nrow(sm)
ncol(sm)
sm
if (!is.null(g) && anyNA(g)) g <- addNA(g)  # Add NA level only if needed
vg <- if (!is.null(g)) split(v, f=g) else list(Overall=v)  # Split into groups
v
g
summaryNA <- function(x) {
x <- na.omit(x)
n <- length(x)
if (n == 0) return(rep(NA, 10))
stats <- c(n, summary(x)[c(1:3,5,6,4)], sd(x), sd(x)/sqrt(n))
if (n < 5) stats[c(3, 5)] <- NA  # Set Q1 & Q3 to NA if n < 5
if (n < 2) stats[c(9, 10)] <- NA  # Set SD & SE to NA if n < 2
return(stats)
}
sm <- as.data.frame(t(sapply(vg, summaryNA)))
dim(sm)
sm
sm[1,]
sm[,1]
sm[,2]
length(sm)
sm[[1]]
sm[[10]]
if (Combined & !is.null(g)) sm <- rbind(sm, Combined = summaryNA(v))
vg
summaryNA(vg[[1]])
summaryNA(vg[[2]])
summaryNA(vg[[9]])
length(summaryNA(vg[[2]]))
length(summaryNA(vg[[9]]))
x <- vg[[2]]
x
x <- na.omit(x)
n <- length(x)
if (n == 0) return(rep(NA, 10))
stats <- c(n, summary(x)[c(1:3,5,6,4)], sd(x), sd(x)/sqrt(n))
if (n < 5) stats[c(3, 5)] <- NA  # Set Q1 & Q3 to NA if n < 5
if (n < 2) stats[c(9, 10)] <- NA  # Set SD & SE to NA if n < 2
stats
length(stats)
if (!is.null(g) && anyNA(g)) g <- addNA(g)  # Add NA level only if needed
vg <- if (!is.null(g)) split(v, f=g) else list(Overall=v)  # Split into groups
summaryNA <- function(x) {
x <- na.omit(x)
n <- length(x)
if (n == 0) return(rep(NA, 9))
stats <- c(n, summary(x)[c(1:3,5,6,4)], sd(x), sd(x)/sqrt(n))
if (n < 5) stats[c(3, 5)] <- NA  # Set Q1 & Q3 to NA if n < 5
if (n < 2) stats[c(9, 10)] <- NA  # Set SD & SE to NA if n < 2
return(stats)
}
summaryNA
sm <- as.data.frame(t(sapply(vg, summaryNA)))
sm
if (Combined & !is.null(g)) sm <- rbind(sm, Combined = summaryNA(v))
sm
sum(sm$V1 )
sum(sm$V1 , na.rm=TRUE)
## ------------------ ##
groupSum <- function(v, g=NULL, Combined=TRUE, select_stats=NULL) {
# Summarizes a numeric vector, optionally by groups.
# Input: Numeric vector `v` and optional grouping variable `g` (factor or character).
# Output: Summary statistics for each group, including NA as a separate group (if any).
# Select what to display. e.g., select_stats=c('N','Q1','Med','Q3') or
# Select what not to display. e.g., select_stats=c('-SD','-SE')
if (!is.null(g) && anyNA(g)) g <- addNA(g)  # Add NA level only if needed
vg <- if (!is.null(g)) split(v, f=g) else list(Overall=v)  # Split into groups
summaryNA <- function(x) {
x <- na.omit(x)
n <- length(x)
if (n == 0) return(rep(NA, 9))
stats <- c(n, summary(x)[c(1:3,5,6,4)], sd(x), sd(x)/sqrt(n))
if (n < 5) stats[c(3, 5)] <- NA  # Set Q1 & Q3 to NA if n < 5
if (n < 2) stats[c(9, 10)] <- NA  # Set SD & SE to NA if n < 2
return(stats)
}
sm <- as.data.frame(t(sapply(vg, summaryNA)))
if (Combined & !is.null(g)) sm <- rbind(sm, Combined = summaryNA(v))
colnames(sm) <- c("N", "Min", "Q1", "Med", "Q3", "Max", 'Mean', "SD", "SE")
# **New explicit inclusion/exclusion logic**
if (!is.null(select_stats)) {
remove_mode <- any(grepl("^-", select_stats))  # Check if negative selection is used
if (remove_mode) {
select_stats <- sub("-", "", select_stats)  # Remove "-" prefix
sm <- sm[, !colnames(sm) %in% select_stats, drop=FALSE]  # Remove specified stats
} else {
sm <- sm[, select_stats, drop=FALSE]  # Keep only specified stats
}
return(sm)
}
## ----------------- ##
x <- cluster_points(y, 3)
x
head(x)
groupSum(x$y)
args(groupSum)
groupSum(x$y, x$cluster_id)
sm
if (!is.null(g) && anyNA(g)) g <- addNA(g)  # Add NA level only if needed
vg <- if (!is.null(g)) split(v, f=g) else list(Overall=v)  # Split into groups
summaryNA <- function(x) {
x <- na.omit(x)
n <- length(x)
if (n == 0) return(rep(NA, 9))
stats <- c(n, summary(x)[c(1:3,5,6,4)], sd(x), sd(x)/sqrt(n))
if (n < 5) stats[c(3, 5)] <- NA  # Set Q1 & Q3 to NA if n < 5
if (n < 2) stats[c(9, 10)] <- NA  # Set SD & SE to NA if n < 2
return(stats)
}
sm <- as.data.frame(t(sapply(vg, summaryNA)))
sm
source('RFunctions2.R')
groupSum(x$y, x$cluster_id)
source('RFunctions2.R')
groupSum(x$y, x$cluster_id)
groupSum(x$y, x$cluster_id, omit_all_NA=TRUE)
cluster_points <- function(y, clustering_distance) {
if (length(y) == 1) {
return(data.frame(
y = y,
original_position = 1,
cluster_id = 1,
cluster_size = 1,
within_cluster_id = 1
))
}
# Sort y while keeping track of original indices
y_ordered <- order(y)
y_sorted <- data.frame(y = y[y_ordered], original_position = y_ordered)
# Initialize each value as its own cluster
clusters <- lapply(seq_len(nrow(y_sorted)), function(i) y_sorted[i, , drop = FALSE])
while (length(clusters) > 1) {
# Compute centroids efficiently
cluster_centroids <- vapply(clusters, function(cl) mean(cl$y), numeric(1))
# Compute distances between consecutive cluster centroids
pairwise_distances <- diff(cluster_centroids)
# Check if merging is possible
if (length(pairwise_distances) == 0) break
# Find the closest pair
min_index <- which.min(pairwise_distances)
min_distance <- pairwise_distances[min_index]
# Stop if no valid merge is possible
if (min_distance > clustering_distance) break
# Merge the closest clusters
clusters[[min_index]] <- rbind(clusters[[min_index]], clusters[[min_index + 1]])
# Remove the merged cluster
clusters <- clusters[-(min_index + 1)]
}
# Convert clusters into final output
out_list <- vector("list", length(clusters))
for (i in seq_along(clusters)) {
this_cluster <- clusters[[i]]
n <- nrow(this_cluster)
out_list[[i]] <- data.frame(
y = this_cluster$y,
original_position = this_cluster$original_position,
cluster_id = i,
cluster_size = n,
within_cluster_id = sample(n)  # Shuffle order if needed
)
}
# Combine into a single data frame
result <- do.call(rbind, out_list)
# Restore original order
result <- result[order(result$original_position), ]
return(result)
}
args(cluster_points)
y
cluster_points(y,0)
cluster_points(y,0) -> k
head(k)
k[order(k$cluster_id),]
k <- cluster_points(y,1)
k[order(k$cluster_id),]
cluster_points <- function(y, clustering_distance) {
if (all(is.na(y))) {
return(data.frame(
y = y,
original_position = seq_along(y),
cluster_id = 1,
cluster_size = length(y),
within_cluster_id = seq_along(y)
))
}
# Separate NA values
na_indices <- which(is.na(y))
non_na_indices <- which(!is.na(y))
if (length(non_na_indices) == 0) {
# If all values are NA, assign them as a single cluster
return(data.frame(
y = y,
original_position = seq_along(y),
cluster_id = 1,
cluster_size = length(y),
within_cluster_id = seq_along(y)
))
}
# Sort non-NA values while keeping track of original indices
y_ordered <- order(y[non_na_indices])
y_sorted <- data.frame(y = y[non_na_indices][y_ordered], original_position = non_na_indices[y_ordered])
# Initialize each value as its own cluster
clusters <- lapply(seq_len(nrow(y_sorted)), function(i) y_sorted[i, , drop = FALSE])
while (length(clusters) > 1) {
# Compute centroids efficiently
cluster_centroids <- vapply(clusters, function(cl) mean(cl$y), numeric(1))
# Compute distances between consecutive cluster centroids
pairwise_distances <- diff(cluster_centroids)
# Check if merging is possible
if (length(pairwise_distances) == 0) break
# Find the closest pair
min_index <- which.min(pairwise_distances)
min_distance <- pairwise_distances[min_index]
# Stop if no valid merge is possible
if (min_distance > clustering_distance) break
# Merge the closest clusters
clusters[[min_index]] <- rbind(clusters[[min_index]], clusters[[min_index + 1]])
# Remove the merged cluster
clusters <- clusters[-(min_index + 1)]
}
# Convert clusters into final output
out_list <- vector("list", length(clusters))
for (i in seq_along(clusters)) {
this_cluster <- clusters[[i]]
n <- nrow(this_cluster)
out_list[[i]] <- data.frame(
y = this_cluster$y,
original_position = this_cluster$original_position,
cluster_id = i,
cluster_size = n,
within_cluster_id = sample(n)  # Shuffle order if needed
)
}
# Combine clustered data
result <- do.call(rbind, out_list)
# Handle NA values as a separate cluster with the largest cluster_id
if (length(na_indices) > 0) {
na_cluster <- data.frame(
y = rep(NA, length(na_indices)),
original_position = na_indices,
cluster_id = max(result$cluster_id, na.rm = TRUE) + 1,
cluster_size = length(na_indices),
within_cluster_id = seq_along(na_indices)  # Assign within-cluster IDs sequentially
)
result <- rbind(result, na_cluster)
}
# Restore original order
result <- result[order(result$original_position), ]
return(result)
}
k <- cluster_points(y,1)
k
y
k[order(k$cluster_id),]
head(k)
groupSum(v=k$y)
groupSum(v=k$y, g=k$cluster_id)
Combined
select_stats
omit_all_NA=FALSE
groupSum(v=k$y, g=k$cluster_id)
# groupSum(v=k$y, g=k$cluster_id)
v <- k$y
g <- k$cluster_id
g
v
if (!is.null(g) && anyNA(g)) g <- addNA(g)  # Add NA level only if needed
vg <- if (!is.null(g)) split(v, f=g) else list(Overall=v)  # Split into groups
summaryNA <- function(x) {
x <- na.omit(x)
n <- length(x)
if (n == 0) return(rep(NA, 9))
stats <- c(n, summary(x)[c(1:3,5,6,4)], sd(x), sd(x)/sqrt(n))
if (n < 5) stats[c(3, 5)] <- NA  # Set Q1 & Q3 to NA if n < 5
if (n < 2) stats[c(9, 10)] <- NA  # Set SD & SE to NA if n < 2
return(stats)
}
vg
sm <- as.data.frame(t(sapply(vg, summaryNA)))
sm
sm[1,]
sm[,1]
sm[[1]]
sm[[3]]
length(sm[[3]])
dim(sm[[3]])
sm[[3]]
class(sm[[3]])
sm[,1]
summaryNA(vg[[1]])
summaryNA(vg[[2]])
summaryNA(vg[[3]])
vg[[3]]
summaryNA(vg[[4]])
length(vg)
vg
summaryNA(vg[[15]])
summaryNA(vg[[16]])
length(summary(NA(vg[[15]])))
length(summaryNA(vg[[15]])))
length(summaryNA(vg[[15]]))
length(summaryNA(vg[[1]]))
length(summaryNA(vg[[16]]))
summaryNA(vg[[1]])
summaryNA(vg[[14]])
summaryNA(vg[[15]])
x <- vg[[15]]
c(n, summary(x)[c(1:3,5,6,4)], sd(x), sd(x)/sqrt(n))
x <- vg[[14]]
x
c(n, summary(x)[c(1:3,5,6,4)], sd(x), sd(x)/sqrt(n))
length(summaryNA(vg[[15]]))
summaryNA(vg[[15]])
x <- vg[[15]]
x
x <- na.omit(x)
n <- length(x)
stats <- c(n, summary(x)[c(1:3,5,6,4)], sd(x), sd(x)/sqrt(n))
stats
source('RFunctions2.R')
y
x <- cluster_points(y, 10)
head(x)
groupSum(x[,1])
groupSum(x[,1], x[,3])
groupSum(x[,1], x[,3], omit_all_NA = T)
g <- sample(LETTERS[1:4], 50, T)
groupSum(x[,1], g)
y <- x[,1]
y[g=='D']
y[g=='D'] <- NA
groupSum(y,g)
groupSum(y,g, omit_all_NA = T)
source('RFunctions2.R')
groupSum(y,g, omit_all_NA = T)
groupSum(y,g, omit_all_NA = F)
source('RFunctions2.R')
groupSum(y,g, omit_all_NA = F)
source('RFunctions2.R')
groupSum(y,g, omit_all_NA = F)
groupSum(y,g, omit_all_NA = T)
source('RFunctions2.R')
groupSum(y,g, omit_all_NA = T)
summaryNA <- function(x) {
n_miss <- sum(is.na(x))
x <- na.omit(x)
n <- length(x)
if (n == 0) return(c(n,n_miss,rep(NA, 8)))
stats <- c(n, n_miss, summary(x)[c(1:3,5,6,4)], sd(x), sd(x)/sqrt(n))
if (n < 5) stats[c(4, 6)] <- NA  # Set Q1 & Q3 to NA if n < 5
if (n < 2) stats[c(9, 10)] <- NA  # Set SD & SE to NA if n < 2
return(stats)
}
sm <- as.data.frame(t(sapply(vg, summaryNA)))
sm
if (!is.null(g) && anyNA(g)) g <- addNA(g)  # Add NA level only if needed
vg <- if (!is.null(g)) split(v, f=g) else list(Overall=v)  # Split into groups
summaryNA <- function(x) {
n_miss <- sum(is.na(x))
x <- na.omit(x)
n <- length(x)
if (n == 0) return(c(n,n_miss,rep(NA, 8)))
stats <- c(n, n_miss, summary(x)[c(1:3,5,6,4)], sd(x), sd(x)/sqrt(n))
if (n < 5) stats[c(4, 6)] <- NA  # Set Q1 & Q3 to NA if n < 5
if (n < 2) stats[c(9, 10)] <- NA  # Set SD & SE to NA if n < 2
return(stats)
}
sm <- as.data.frame(t(sapply(vg, summaryNA)))
sm
vg
vg$D
vg$D <- NA
vg
sm <- as.data.frame(t(sapply(vg, summaryNA)))
sm
sm[ sm$N>0, ]
source('RFunctions2.R')
groupSum(y,g, omit_all_NA = T)
y
g
:w
y
g
groupSum(y,g, omit_all_NA = F)
omit_all_NA <- TRUE
v <- y
g
v
# Select what not to display. e.g., select_stats=c('-SD','-SE')
if (!is.null(g) && anyNA(g)) g <- addNA(g)  # Add NA level only if needed
vg <- if (!is.null(g)) split(v, f=g) else list(Overall=v)  # Split into groups
summaryNA <- function(x) {
n_miss <- sum(is.na(x))
x <- na.omit(x)
n <- length(x)
if (n == 0) return(c(n,n_miss,rep(NA, 8)))
stats <- c(n, n_miss, summary(x)[c(1:3,5,6,4)], sd(x), sd(x)/sqrt(n))
if (n < 5) stats[c(4, 6)] <- NA  # Set Q1 & Q3 to NA if n < 5
if (n < 2) stats[c(9, 10)] <- NA  # Set SD & SE to NA if n < 2
return(stats)
}
sm <- as.data.frame(t(sapply(vg, summaryNA)))
sm
groupSum(y,g, omit_all_NA = F)
source('RFunctions2.R')
groupSum(y,g, omit_all_NA = F)
groupSum(y,g, omit_all_NA = T)
length(y)
groupSum(y,g, omit_all_NA = F)
cluster_points <- function(y, clustering_distance) {
if (all(is.na(y))) {
return(data.frame(
y = y,
original_position = seq_along(y),
cluster_id = 1,
cluster_size = length(y),
within_cluster_id = seq_along(y)
))
}
# Separate NA values
na_indices <- which(is.na(y))
non_na_indices <- which(!is.na(y))
if (length(non_na_indices) == 0) {
# If all values are NA, assign them as a single cluster
return(data.frame(
y = y,
original_position = seq_along(y),
cluster_id = 1,
cluster_size = length(y),
within_cluster_id = seq_along(y)
))
}
# Sort non-NA values while keeping track of original indices
y_ordered <- order(y[non_na_indices])
y_sorted <- data.frame(y = y[non_na_indices][y_ordered], original_position = non_na_indices[y_ordered])
# Initialize each value as its own cluster
clusters <- lapply(seq_len(nrow(y_sorted)), function(i) y_sorted[i, , drop = FALSE])
while (length(clusters) > 1) {
# Compute centroids efficiently
cluster_centroids <- vapply(clusters, function(cl) mean(cl$y), numeric(1))
# Compute distances between consecutive cluster centroids
pairwise_distances <- diff(cluster_centroids)
# Check if merging is possible
if (length(pairwise_distances) == 0) break
# Find the closest pair
min_index <- which.min(pairwise_distances)
min_distance <- pairwise_distances[min_index]
# Stop if no valid merge is possible
if (min_distance > clustering_distance) break
# Merge the closest clusters
clusters[[min_index]] <- rbind(clusters[[min_index]], clusters[[min_index + 1]])
# Remove the merged cluster
clusters <- clusters[-(min_index + 1)]
}
# Convert clusters into final output
out_list <- vector("list", length(clusters))
for (i in seq_along(clusters)) {
this_cluster <- clusters[[i]]
n <- nrow(this_cluster)
out_list[[i]] <- data.frame(
y = this_cluster$y,
original_position = this_cluster$original_position,
cluster_id = i,
cluster_size = n,
within_cluster_id = sample(n)  # Shuffle order if needed
)
}
# Combine clustered data
result <- do.call(rbind, out_list)
# Handle NA values as a separate cluster with the largest cluster_id
if (length(na_indices) > 0) {
na_cluster <- data.frame(
y = rep(NA, length(na_indices)),
original_position = na_indices,
cluster_id = max(result$cluster_id, na.rm = TRUE) + 1,
cluster_size = length(na_indices),
within_cluster_id = seq_along(na_indices)  # Assign within-cluster IDs sequentially
)
result <- rbind(result, na_cluster)
}
# Restore original order
result <- result[order(result$original_position), ]
return(result)
}
cluster_points(y)
y
cluster_points(y,0)
k <- cluster_points(y,0)
k
head(k)
groupSum(k$y)
groupSum(k$y, k$cluster_id)
k <- cluster_points(y,5)
groupSum(k$y, k$cluster_id)
k <- cluster_points(y,6)
groupSum(k$y, k$cluster_id)
k <- cluster_points(y,8)
groupSum(k$y, k$cluster_id)
source('cluster_points.R')
q()
